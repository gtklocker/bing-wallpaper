#!/usr/bin/env python3
import urllib.request
import json
import subprocess
import shutil
import os
import os.path
import hashlib

# TODO: use xdg, but we don't wanna rely on an external library now
cache_dir = os.path.expanduser("~/.cache/bing-wallpaper/")


def set_background_osascript(filename):
    osascript_stdin = (
        " ".join(
            [
                'tell application "System Events"',
                f'to tell every desktop to set picture to "{filename}" as POSIX file',
            ]
        )
    ).encode("utf-8")
    subprocess.run("osascript", input=osascript_stdin).check_returncode()


def set_background_feh(filename):
    subprocess.run(["feh", "--bg-fill", filename]).check_returncode()


def set_background(filename):
    background_commands_supported = {
        "osascript": set_background_osascript,
        "feh": set_background_feh,
    }

    for cmd, fn in background_commands_supported.items():
        if shutil.which(cmd):
            fn(filename)
            break


def bing_wallpaper_url() -> str:
    bing_base, market = "https://www.bing.com", "ja-JP"
    bing_api = f"{bing_base}/HPImageArchive.aspx?format=js&idx=0&n=1&mkt={market}"
    response = json.load(urllib.request.urlopen(bing_api))
    img_base = response["images"][0]["urlbase"]
    return f"{bing_base}{img_base}_UHD.jpg"


if not os.path.exists(cache_dir):
    print("creating cache dir")
    os.makedirs(cache_dir)

url = bing_wallpaper_url()
url_hash = hashlib.sha256(url.encode("ascii")).hexdigest()
wallpaper_path = os.path.join(cache_dir, f"{url_hash}.jpg")
if not os.path.exists(wallpaper_path):
    print(f"downloading from {url} to {wallpaper_path}")
    wallpaper_filename, _ = urllib.request.urlretrieve(url, filename=wallpaper_path)
else:
    print(f"wallpaper already cached in {wallpaper_path}")
set_background(wallpaper_path)
